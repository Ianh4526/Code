Using for Loops with Lists

Technically, a for loop repeats the code block once for each value in a list or list-like value.

for i in range(4):
    print(i)


for i in [0, 1, 2, 3]:
    print(i)

    >>> supplies = ['pens', 'staplers', 'flame-throwers', 'binders']
    >>> for i in range(len(supplies)):
        print('Index ' + str(i) + ' in supplies is: ' + supplies[i])

##########################################################################################################################

The in and not in Operators

You can determine whether a value is or isnâ€™t in a list with the in and not in operators.

>>> 'howdy' in ['hello', 'hi', 'howdy', 'heyas']
True
>>> spam = ['hello', 'hi', 'howdy', 'heyas']
>>> 'cat' in spam
False
>>> 'howdy' not in spam
False
>>> 'cat' not in spam
True


myPets = ['Zophie', 'Pooka', 'Fat-tail']
print('Enter a pet name:')
name = input()
if name not in myPets:
    print('I do not have a pet named ' + name)
else:
    print(name + ' is my pet.')


##########################################################################################################################

The Multiple Assignment Trick

The multiple assignment trick is a shortcut that lets you assign multiple variables with the values in a list in one line of code.

>>> cat = ['fat', 'orange', 'loud']
>>> size = cat[0]
>>> color = cat[1]
>>> disposition = cat[2]

you could type this line of code:

>>> cat = ['fat', 'orange', 'loud']
>>> size, color, disposition = cat

The multiple assignment trick can also be used to swap the values in two variables:

>>> a, b = 'Alice', 'Bob'
>>> a, b = b, a
>>> print(a)
'Bob'
>>> print(b)
'Alice'

##########################################################################################################################

Augmented Assignment Operators

When assigning a value to a variable, you will frequently use the variable itself.

>>> spam = 42
>>> spam = spam + 1
>>> spam
43

As a shortcut, you can use the augmented assignment operator += to do the same thing:

>>> spam = 42
>>> spam += 1
>>> spam
43


Augmented assignment statement              Equivalent assignment statement

spam += 1                                     spam = spam + 1

spam -= 1                                     spam = spam - 1

spam *= 1                                     spam = spam * 1

spam /= 1                                     spam = spam / 1

spam %= 1                                     spam = spam % 1

>>> spam = 'Hello'
>>> spam += ' world!'
>>> spam
'Hello world!'

>>> bacon = ['Zophie']
>>> bacon *= 3
>>> bacon
['Zophie', 'Zophie', 'Zophie']


##########################################################################################################

For Loops technically iterate over the values in a Lists

the range() function returns a list like value. it can be passed to the list() function if you nid list values

Variables can swap their values using multiple Assignment

augmented assngment operato like += are use as shortcut
